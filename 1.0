public class RECURSION {
    //base case, kaam, call
    public static void main(String[] args){
       // int[] arr={0,1,2,5,3,4,5};

    }

    public static void tenToOne(int n){
        if(n==1){
            System.out.print(n+" ");
            return;
        }
        System.out.print(n+" ");
        tenToOne(n-1);
    }

    public static void oneToTen(int n){
        if(n==1){
            System.out.print(n+" ");
            return;
        }
        oneToTen(n-1);
        System.out.print(n+" ");
    }

    public static int fact(int n){
        if(n==0)    return 1;
       return  n*fact(n-1);
    }

    public static int sum(int n){
        if(n==0)    return 0;
        return n+sum(n-1);
    }

    public static int fibo(int n){
        if(n==0)    return 0;
        if(n==1)    return 1;
        return fibo(n-1)+fibo(n-2);
    }

    public static boolean sorted(int[] arr,int i){
        if(i==arr.length-1) return true;
        if(arr[i]>arr[i+1]) return false;
        return sorted(arr,i+1);
    }

    public static int firstOccurence(int[] arr, int key, int i){
        if(i==arr.length)   return -1;
        if(arr[i]==key) return i+1;
        return firstOccurence(arr,key,i+1);
    }

     public static int lastOccurence(int[] arr,int key, int i){
        if(i==arr.length)   return -1;
        int isFound=lastOccurence(arr,key,i+1);
        if(isFound==-1 && arr[i]==key) return i;
        return isFound;
     }

     public static int exp(int x,int n){
        if(n==0)    return 1;
        return x*exp(x,n-1);
     }

     public static int optExp(int x, int n){
        if(n==0)    return 1;
        int halfProd=optExp(x,n/2)*optExp(x,n/2);
        if(n%2!=0)  halfProd*=x;
        return halfProd;
     }
}
